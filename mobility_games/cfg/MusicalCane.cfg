#!/usr/bin/env python
PACKAGE = "mobility_games"

from dynamic_reconfigure.parameter_generator_catkin import *
from configHelper import soundFinder

gen = ParameterGenerator()

mode_enum = gen.enum([	gen.const("Music",	str_t, "music", "Plays music while sweeping."),
			gen.const("Sound",	str_t, "sound", "Plays a sound with each sweep.")],
			"Sets the audio feedback mode.")

gen.add("mode", str_t, 0, "Change mode of audio feedback.", "sound", edit_method = mode_enum)

soundFinder(gen, 'musicTrack')

gen.add("reward_at_10", bool_t, 0, "Reward at 10", True)
gen.add("reward_at_20", bool_t, 0, "Reward at 20", True)
gen.add("reward_at_50", bool_t, 0, "Reward at 50", True)
gen.add("reward_at_100", bool_t, 0, "Reward at 100", True)
gen.add("reward_at_250", bool_t, 0, "Reward at 250", True)
gen.add("reward_at_500", bool_t, 0, "Reward at 500", True)
gen.add("reward_at_1000", bool_t, 0, "Reward at 1000", True)

# create a dropdown for selecting a reward sound
soundFinder(gen, 'rewardSound')





# soundFinder(gen, 'musicTrack')

gen.add("count_sweeps", bool_t, 0, "Count Sweeps aloud, otherwise beep", True)
soundFinder(gen, 'countingSound')

gen.add("sweep_tolerance", double_t, 0, "Time allowed between sweep points.", 2, 0, 5)
gen.add("sweep_range", double_t, 0, "Width of sweep required for a full sweep", 0.6, 0, 2)

exit(gen.generate(PACKAGE, "mobility_games", "MusicalCane"))
